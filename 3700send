#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.seq_ACK_set = set()
        self.ACK_counter = 0
        self.all_sent = False

        self.seq = 0 #number of readen bytes acknowledged by the receiver
        self.window = DATA_SIZE*3 #space available in the receiver to read

    def log(self, message):
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]
            socks = select.select(sockets, [], [], 0.1)[0]
            for conn in socks:
                if conn == self.socket:

                    #read the response of the receiver
                    k, addr = conn.recvfrom(65535)
                    msg = json.loads(k.decode('utf-8'))
                    self.log("Received message '%s'" % msg)

                    #first we check that it is not a duplicate ACK
                    if msg['seq_ACK'] not in self.seq_ACK_set:
                        self.seq_ACK_set.add(msg['seq_ACK'])
                        self.window += DATA_SIZE
                        self.waiting = False
                        self.ACK_counter -= 1

                        if self.all_sent and self.ACK_counter == 0:
                            self.log("All ACK received, exiting")
                            sys.exit(0)
                    else:
                        self.log("Received duplicated ACK with seq = %s" % msg['seq_ACK'])


                elif conn == sys.stdin:

                    exit = False
                    #read the data that must be transmited to the receiver
                    while self.window >= DATA_SIZE and not exit:
                        data = sys.stdin.read(DATA_SIZE)
                        
                        #check if EOF
                        if len(data) == 0:
                            exit = True
                            self.all_sent = True
                            self.log("All sent!")
                        else:
                            msg = {"type": "msg", "seq" : self.seq, "data" : data}
                            self.log("Sending message '%s'" % msg)
                            self.send(msg)
                            self.ACK_counter += 1

                            self.seq += DATA_SIZE
                            self.window -= DATA_SIZE

                    #when there is no window available, wait for ACK
                    self.waiting = True

        return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
