#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.seq_ACK_set = set()
        self.all_sent = False

        self.seq = 0  # number of readen bytes acknowledged by the receiver
        self.window = DATA_SIZE  # space available in the receiver to read

        self.sent_packets = {}
        self.ACKs_left = []  # this list contains all the seq of ACKs pending to be received

        self.rtt = 0.5  # save the last rtt time

        # self.cwnd = 1
        self.ssthresh = 10
        self.counter = 0

    def log(self, message):
        """Print messages to STDERR"""
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        """Send a message to the host"""
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def send_message_with_checksum(self, msg, seq):
        msg["checksum"] = self.compute_checksum_sender(msg)
        self.sent_packets[seq] = (msg['data'], time.time())
        self.send(msg)

    def compute_checksum_sender(self, msg_dic):

        msg_st = json.dumps(msg_dic, sort_keys=True)

        msg = ''.join(format(ord(x), 'b') for x in msg_st)

        # UDP devides the packet in 16-bit words
        sum = 0
        i = 16
        while i < len(msg):
            sum += int(msg[i - 16:i], 2)
            i += 16

        sum = bin(sum)

        # Add the overflow bits
        if len(sum) > 16:
            x = len(sum) - 16
            sum = bin(int(sum[0:x], 2) + int(sum[x:], 2))[2:]
        if len(sum) < 16:
            sum = '0' * (16 - len(sum)) + sum

        # Calculate the complement of sum
        result = ''
        for i in sum:
            if i == '1':
                result += '0'
            else:
                result += '1'

        return result

    def check_checksum(self, send, receive):
        sum = bin(int(send, 2) + int(receive, 2))[2:]

        # Finding the sum of checksum and received checksum
        result = ''
        for i in sum:
            if (i == '1'):
                result += '0'
            else:
                result += '1'

        # If sum = 0, No error is detected
        return int(result, 2) == 0

    def run(self):
        """Run the program"""
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            # set timeout to 1s
            socks = select.select(sockets, [], [], 0.1)[0]
            received = time.time()
            self.log("All sent: " + str(self.all_sent))

            if self.all_sent and len(self.ACKs_left) == 0:
                self.log("All ACK received, exiting")
                sys.exit(0)

            #if self.waiting:
            self.log("HA ENTRADO")
            self.log("ACKS LEFT: " + str(self.ACKs_left))
            self.log("current RTT: " + str(self.rtt))
            self.log(("current window: " + str(self.window)))
            for seq in self.ACKs_left:

                # use previous rtt to estimate the best timeout
                if (received - self.sent_packets[seq][1]) > self.rtt * 2:
                    while self.counter <= self.window:
                        # timeout has happened, so resend even if we received the packet or not
                        self.ssthresh = self.window / 2
                        self.window = 1
                        msg = {"type": "msg", "seq": seq, "data": self.sent_packets[seq][0]}
                        self.log("Resending message '%s'" % msg)
                        self.send_message_with_checksum(msg, seq)
                        self.counter += 1
            self.counter = 0

            for conn in socks:
                if conn == self.socket:
                    # Read the response of the receiver
                    k, addr = conn.recvfrom(65535)
                    try:
                        msg = json.loads(k.decode('utf-8'))
                        self.log("Received message '%s'" % msg)

                        checksum_reciever = msg['checksum']
                        del msg['checksum']
                        checksum_sender = self.compute_checksum_sender(msg)

                        if self.check_checksum(checksum_sender, checksum_reciever):
                            # First we check that it is not a duplicate ACK
                            if msg['seq_ACK'] not in self.seq_ACK_set:
                                if self.window < self.ssthresh:
                                    # slow start
                                    self.window += 1
                                else:
                                    # congestion avoidance
                                    self.window += (1/self.window)

                                self.seq_ACK_set.add(msg['seq_ACK'])
                                # Since it was acknowledged we can enlarge the window size
                                self.window += 1
                                self.ACKs_left.remove(msg['seq_ACK'])

                                # update rtt
                                self.rtt = 0.2 * (received - self.sent_packets[msg['seq_ACK']][1]) + 0.8 * self.rtt
                                self.log("RTT updated: " + str(self.rtt))

                                if len(self.ACKs_left) == 0:
                                    # Not waiting for an ACK
                                    self.waiting = False
                                    # self.window = self.cwnd * DATA_SIZE
                            else:
                                if self.window < self.ssthresh:
                                    # slow start
                                    self.window += 1
                                else:
                                    # congestion avoidance
                                    self.window += (1/self.window)
                                self.log("Received duplicated ACK with seq = %s" % msg['seq_ACK'])

                        else:
                            self.log("corrupted ACK from the reciever")

                    except (ValueError, KeyError, TypeError):
                        self.log("Received corrupt packet")

                elif conn == sys.stdin:
                    exit = False
                    # Read the data that must be transmited to the receiver
                    while self.window*DATA_SIZE >= DATA_SIZE and not exit:
                        data = sys.stdin.read(DATA_SIZE)
                        # Check if EOF
                        if len(data) == 0:
                            exit = True
                            self.all_sent = True
                            self.log("All sent!")
                        else:
                            msg = {"type": "msg", "seq": self.seq, "data": data}
                            self.log("Sending message '%s'" % msg)
                            self.send_message_with_checksum(msg, self.seq)

                            self.ACKs_left.append(self.seq)
                            self.seq += 1
                            self.window -= 1

                    # when there is no window available, wait for ACK
                    self.waiting = True

        # return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
