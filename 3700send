#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math

DATA_SIZE = 1375


class Sender:
    def __init__(self, host, port):
        self.host = host
        self.remote_port = int(port)
        self.log("Sender starting up using port %s" % self.remote_port)
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('0.0.0.0', 0))
        self.waiting = False

        self.seq_ACK_set = set()
        self.all_sent = False

        self.seq = 0  # number of readen bytes acknowledged by the receiver
        self.window = DATA_SIZE * 3  # space available in the receiver to read

        self.sent_packets = {}
        self.ACKs_left = []  # this list contains all the seq of ACKs pending to be received

    def log(self, message):
        """Print messages to STDERR"""
        sys.stderr.write(message + "\n")
        sys.stderr.flush()

    def send(self, message):
        """Send a message to the host"""
        self.socket.sendto(json.dumps(message).encode('utf-8'), (self.host, self.remote_port))

    def run(self):
        """Run the program"""
        while True:
            sockets = [self.socket, sys.stdin] if not self.waiting else [self.socket]

            # set timeout to 1s
            socks = select.select(sockets, [], [], 0.1)[0]
            recevied = time.time()
            self.log("All sent: " + str(self.all_sent))
            self.log("Window: " + str(self.window))

            if self.all_sent and len(self.ACKs_left) == 0:
                self.log("All ACK received, exiting")
                sys.exit(0)

            self.log("SOCKS: " + str(socks))
            if self.waiting:
                self.log("HA ENTRADO")
                self.log(str(self.ACKs_left))
                for seq in self.ACKs_left:
                    self.log("Received: " + str(recevied))
                    self.log("Started: " + str(self.sent_packets[seq][1]))
                    if recevied - self.sent_packets[seq][1] > 1:
                        # timeout has happened
                        msg = {"type": "msg", "seq": seq, "data": self.sent_packets[seq][0]}
                        self.log("Resending message '%s'" % msg)
                        self.send(msg)

            for conn in socks:
                if conn == self.socket:
                    # Read the response of the receiver
                    k, addr = conn.recvfrom(65535)
                    try:
                        msg = json.loads(k.decode('utf-8'))
                        self.log("Received message '%s'" % msg)

                        # First we check that it is not a duplicate ACK
                        if msg['seq_ACK'] not in self.seq_ACK_set:
                            self.seq_ACK_set.add(msg['seq_ACK'])
                            # Since it was acknowledged we can enlarge the window size
                            self.window += DATA_SIZE
                            self.ACKs_left.remove(msg['seq_ACK'])

                            self.log("ACKS LEFT: " + str(self.ACKs_left))
                            if len(self.ACKs_left) == 0:
                                # Not waiting for an ACK
                                self.waiting = False
                        else:
                            self.log("Received duplicated ACK with seq = %s" % msg['seq_ACK'])

                    except (ValueError, KeyError, TypeError):
                        self.log("Received corrupt packet")

                elif conn == sys.stdin:
                    exit = False
                    # Read the data that must be transmited to the receiver
                    while self.window >= DATA_SIZE and not exit:
                        data = sys.stdin.read(DATA_SIZE)
                        self.log(str(type(data)))
                        # Check if EOF
                        if len(data) == 0:
                            exit = True
                            self.all_sent = True
                            self.log("All sent!")
                        else:
                            msg = {"type": "msg", "seq": self.seq, "data": data}
                            self.sent_packets[self.seq] = (msg['data'], time.time())
                            self.log("Sending message '%s'" % msg)
                            self.send(msg)
                            self.ACKs_left.append(self.seq)

                            self.seq += 1
                            self.window -= DATA_SIZE

                    # when there is no window available, wait for ACK
                    self.waiting = True

                self.log(str(self.waiting))

        # return


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='send data')
    parser.add_argument('host', type=str, help="Remote host to connect to")
    parser.add_argument('port', type=int, help="UDP port number to connect to")
    args = parser.parse_args()
    sender = Sender(args.host, args.port)
    sender.run()
